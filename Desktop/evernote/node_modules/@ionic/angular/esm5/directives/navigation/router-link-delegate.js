import * as tslib_1 from "tslib";
import { LocationStrategy } from '@angular/common';
import { Directive, ElementRef, HostListener, Optional } from '@angular/core';
import { Router, RouterLink } from '@angular/router';
import { NavController } from '../../providers/nav-controller';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/router';
var RouterLinkDelegate = /** @class */ (function () {
    function RouterLinkDelegate(locationStrategy, navCtrl, elementRef, router, routerLink) {
        this.locationStrategy = locationStrategy;
        this.navCtrl = navCtrl;
        this.elementRef = elementRef;
        this.router = router;
        this.routerLink = routerLink;
        this.routerDirection = 'forward';
    }
    RouterLinkDelegate.prototype.ngOnInit = function () {
        this.updateTargetUrlAndHref();
    };
    RouterLinkDelegate.prototype.ngOnChanges = function () {
        this.updateTargetUrlAndHref();
    };
    RouterLinkDelegate.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    RouterLinkDelegate.prototype.updateTargetUrlAndHref = function () {
        if (this.routerLink) {
            var href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.routerLink.urlTree));
            this.elementRef.nativeElement.href = href;
        }
    };
    /**
     * @internal
     */
    RouterLinkDelegate.prototype.onClick = function (ev) {
        this.navCtrl.setDirection(this.routerDirection);
        ev.preventDefault();
    };
    RouterLinkDelegate.ctorParameters = function () { return [
        { type: LocationStrategy },
        { type: NavController },
        { type: ElementRef },
        { type: Router },
        { type: RouterLink, decorators: [{ type: Optional }] }
    ]; };
    tslib_1.__decorate([
        HostListener('click', ['$event'])
    ], RouterLinkDelegate.prototype, "onClick", null);
    RouterLinkDelegate = tslib_1.__decorate([ tslib_1.__param(4, Optional())
    ], RouterLinkDelegate);
RouterLinkDelegate.ɵfac = function RouterLinkDelegate_Factory(t) { return new (t || RouterLinkDelegate)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocationStrategy), ɵngcc0.ɵɵdirectiveInject(NavController), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.RouterLink, 8)); };
RouterLinkDelegate.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RouterLinkDelegate, selectors: [["", "routerLink", ""]], hostBindings: function RouterLinkDelegate_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function RouterLinkDelegate_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { routerDirection: "routerDirection" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RouterLinkDelegate, [{
        type: Directive,
        args: [{
                selector: '[routerLink]',
                inputs: ['routerDirection']
            }]
    }], function () { return [{ type: ɵngcc1.LocationStrategy }, { type: NavController }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.Router }, { type: ɵngcc2.RouterLink, decorators: [{
                type: Optional
            }] }]; }, { onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
    return RouterLinkDelegate;
}());
export { RouterLinkDelegate };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLWxpbmstZGVsZWdhdGUuanMiLCJzb3VyY2VzIjpbIm5nOi9AaW9uaWMvYW5ndWxhci9kaXJlY3RpdmVzL25hdmlnYXRpb24vcm91dGVyLWxpbmstZGVsZWdhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUlyRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7Ozs7QUFNL0Q7QUFFbUIsSUFJakIsNEJBQ1UsZ0JBQWtDLEVBQ2xDLE9BQXNCLEVBQ3RCLFVBQXNCLEVBQ3RCLE1BQWMsRUFDRixVQUF1QjtBQUM3QyxRQUxVLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxZQUFPLEdBQVAsT0FBTyxDQUFlO0FBQUMsUUFDdkIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBQ3ZCLFdBQU0sR0FBTixNQUFNLENBQVE7QUFBQyxRQUNILGVBQVUsR0FBVixVQUFVLENBQWE7QUFBQyxRQVA5QyxvQkFBZSxHQUFvQixTQUFTLENBQUM7QUFDL0MsSUFPTSxDQUFDO0FBQ1AsSUFDRSxxQ0FBUSxHQUFSO0FBQ0QsUUFBRyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztBQUNsQyxJQUFFLENBQUM7QUFFSCxJQUFFLHdDQUFXLEdBQVg7QUFBYyxRQUNaLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0FBQ2xDLElBQUUsQ0FBQztBQUVILElBQUUsd0NBQVcsR0FBWDtBQUFjLFFBQ1osSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO0FBQzNCLFlBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN0QyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBRUgsSUFBVSxtREFBc0IsR0FBOUI7QUFBYyxRQUNaLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtBQUN6QixZQUFNLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDL0csWUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2hELFNBQUs7QUFDTCxJQUFFLENBQUM7QUFFSCxJQUFFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0wsSUFDRSxvQ0FBTyxHQUFQLFVBQVEsRUFBVztBQUNyQixRQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNwRCxRQUFJLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN4QixJQUFFLENBQUM7QUFDRjtBQUM2RCxnQkFyQ2hDLGdCQUFnQjtBQUM1QyxnQkFBbUIsYUFBYTtBQUNoQyxnQkFBc0IsVUFBVTtBQUNoQyxnQkFBa0IsTUFBTTtBQUN4QixnQkFBbUMsVUFBVSx1QkFBMUMsUUFBUTtBQUFNO0FBQVUsSUE0QjNCO0FBQXFCLFFBRHBCLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNwQyxxREFHRztBQUNGLElBM0NZLGtCQUFrQixnQ0FKOUIsU0FBUyxDQUFDLG5CQUlILENBV0gsbUJBQUEsUUFBUSxFQUFFLENBQUE7Q0FkYixRQUFRLEVBQUUsY0FBYyx6QkFjVixPQVhILGtCQUFrQixDQTJDOUI7V0E3Q0MsTUFBTSxFQUFFLENBQUMsaUJBQWlCLENBQUMsVUFDNUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O29CQTZDRjtBQUFDLElBREQseUJBQUM7QUFDQSxDQURBLEFBM0NELElBMkNDO0FBQ0QsU0E1Q2Esa0JBQWtCO0FBRS9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9jYXRpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciwgUm91dGVyTGluayB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBSb3V0ZXJEaXJlY3Rpb24gfSBmcm9tICdAaW9uaWMvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgTmF2Q29udHJvbGxlciB9IGZyb20gJy4uLy4uL3Byb3ZpZGVycy9uYXYtY29udHJvbGxlcic7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tyb3V0ZXJMaW5rXScsXG4gIGlucHV0czogWydyb3V0ZXJEaXJlY3Rpb24nXVxufSlcbmV4cG9ydCBjbGFzcyBSb3V0ZXJMaW5rRGVsZWdhdGUge1xuXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uPzogU3Vic2NyaXB0aW9uO1xuXG4gIHJvdXRlckRpcmVjdGlvbjogUm91dGVyRGlyZWN0aW9uID0gJ2ZvcndhcmQnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbG9jYXRpb25TdHJhdGVneTogTG9jYXRpb25TdHJhdGVneSxcbiAgICBwcml2YXRlIG5hdkN0cmw6IE5hdkNvbnRyb2xsZXIsXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSByb3V0ZXJMaW5rPzogUm91dGVyTGluayxcbiAgKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnVwZGF0ZVRhcmdldFVybEFuZEhyZWYoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCk6IGFueSB7XG4gICAgdGhpcy51cGRhdGVUYXJnZXRVcmxBbmRIcmVmKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiBhbnkge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVRhcmdldFVybEFuZEhyZWYoKSB7XG4gICAgaWYgKHRoaXMucm91dGVyTGluaykge1xuICAgICAgY29uc3QgaHJlZiA9IHRoaXMubG9jYXRpb25TdHJhdGVneS5wcmVwYXJlRXh0ZXJuYWxVcmwodGhpcy5yb3V0ZXIuc2VyaWFsaXplVXJsKHRoaXMucm91dGVyTGluay51cmxUcmVlKSk7XG4gICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5ocmVmID0gaHJlZjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gIG9uQ2xpY2soZXY6IFVJRXZlbnQpIHtcbiAgICB0aGlzLm5hdkN0cmwuc2V0RGlyZWN0aW9uKHRoaXMucm91dGVyRGlyZWN0aW9uKTtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG59XG4iXX0=