import { __awaiter, __decorate, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import { defaultModules } from './quill-defaults';
import * as i0 from "@angular/core";
import * as i1 from "./quill-editor.interfaces";
import * as ɵngcc0 from '@angular/core';
let QuillService = class QuillService {
    constructor(config) {
        this.config = config;
        this.count = 0;
        if (!this.config) {
            this.config = { modules: defaultModules };
        }
    }
    getQuill() {
        this.count++;
        if (!this.Quill && this.count === 1) {
            this.$importPromise = new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b;
                const quillImport = yield import('quill');
                this.Quill = (quillImport.default ? quillImport.default : quillImport);
                // Only register custom options and modules once
                (_a = this.config.customOptions) === null || _a === void 0 ? void 0 : _a.forEach((customOption) => {
                    const newCustomOption = this.Quill.import(customOption.import);
                    newCustomOption.whitelist = customOption.whitelist;
                    this.Quill.register(newCustomOption, true, this.config.suppressGlobalRegisterWarning);
                });
                (_b = this.config.customModules) === null || _b === void 0 ? void 0 : _b.forEach(({ implementation, path }) => {
                    this.Quill.register(path, implementation, this.config.suppressGlobalRegisterWarning);
                });
                resolve(this.Quill);
            }));
        }
        return this.$importPromise;
    }
};
QuillService.ɵfac = function QuillService_Factory(t) { return new (t || QuillService)(ɵngcc0.ɵɵinject(QUILL_CONFIG_TOKEN)); };
QuillService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }
];
QuillService.ɵprov = i0.ɵɵdefineInjectable({ factory: function QuillService_Factory() { return new QuillService(i0.ɵɵinject(i1.QUILL_CONFIG_TOKEN)); }, token: QuillService, providedIn: "root" });
QuillService = __decorate([ __param(0, Inject(QUILL_CONFIG_TOKEN))
], QuillService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [QUILL_CONFIG_TOKEN]
            }] }]; }, null); })();
export { QuillService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L25neC1xdWlsbC9saWIvcXVpbGwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDbEQsT0FBTyxFQUFFLGtCQUFrQixFQUFlLE1BQU0sMkJBQTJCLENBQUE7QUFDM0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ2pEO0FBR0M7O0FBQ0QsSUFBYSxZQUFZLEdBQXpCLE1BQWEsWUFBWTtBQUN6QixJQUlFLFlBQ3FDLE1BQW1CO0FBQ3ZELFFBRG9DLFdBQU0sR0FBTixNQUFNLENBQWE7QUFDMUQsUUFKVSxVQUFLLEdBQUcsQ0FBQyxDQUFBO0FBQ25CLFFBSUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDdEIsWUFBTSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFBO0FBQy9DLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFLFFBQVE7QUFDVixRQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtBQUNoQixRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ3pDLFlBQU0sSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFPLE9BQU8sRUFBRSxFQUFFO0FBQ2I7QUFFdkIsZ0JBRmQsTUFBTSxXQUFXLEdBQUcsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDakQsZ0JBQ1EsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBUSxDQUFBO0FBQ3JGLGdCQUNRLGdEQUFnRDtBQUN4RCxnQkFBUSxNQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSwwQ0FBRSxPQUFPLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRTtBQUM1RCxvQkFBVSxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDeEUsb0JBQVUsZUFBZSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFBO0FBQzVELG9CQUFVLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO0FBQy9GLGdCQUFRLENBQUMsRUFBQztBQUNWLGdCQUNRLE1BQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLDBDQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUMsY0FBYyxFQUFFLElBQUksRUFBQyxFQUFFLEVBQUU7QUFDdEUsb0JBQVUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLDZCQUE2QixDQUFDLENBQUE7QUFDOUYsZ0JBQVEsQ0FBQyxFQUFDO0FBQ1YsZ0JBQ1EsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUMzQixZQUFNLENBQUMsQ0FBQSxDQUFDLENBQUE7QUFDUixTQUFLO0FBQ0wsUUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUE7QUFDOUIsSUFBRSxDQUFDO0FBQ0gsQ0FBQzs4SEFBQTtBQUNEO0FBQXNDLDRDQWhDakMsTUFBTSxTQUFDLGtCQUFrQjtBQUFRO0FBQUc7QUFONUIsWUFBWSxvQkFIeEIsVUFBVSxDQUFDLFVBQ1YsVUFBVSxFQUFFLHRDQUVWLENBTUMsV0FBQSxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtJQVJYLE1BQ25CLENBQUMsWEFPOEIsR0FObkIsWUFBWSxDQXFDeEI7Ozs7Ozs7OztrQ0FDRDtBQUFDLFNBdENZLFlBQVk7QUFDeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuaW1wb3J0IHsgUVVJTExfQ09ORklHX1RPS0VOLCBRdWlsbENvbmZpZyB9IGZyb20gJy4vcXVpbGwtZWRpdG9yLmludGVyZmFjZXMnXG5pbXBvcnQgeyBkZWZhdWx0TW9kdWxlcyB9IGZyb20gJy4vcXVpbGwtZGVmYXVsdHMnXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFF1aWxsU2VydmljZSB7XG4gIHByaXZhdGUgUXVpbGwhOiBhbnlcbiAgcHJpdmF0ZSAkaW1wb3J0UHJvbWlzZSE6IFByb21pc2U8YW55PlxuICBwcml2YXRlIGNvdW50ID0gMFxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUVVJTExfQ09ORklHX1RPS0VOKSBwdWJsaWMgY29uZmlnOiBRdWlsbENvbmZpZ1xuICApIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnKSB7XG4gICAgICB0aGlzLmNvbmZpZyA9IHvCoG1vZHVsZXM6IGRlZmF1bHRNb2R1bGVzIH1cbiAgICB9XG4gIH1cblxuICBnZXRRdWlsbCgpIHtcbiAgICB0aGlzLmNvdW50KytcbiAgICBpZiAoIXRoaXMuUXVpbGwgJiYgdGhpcy5jb3VudCA9PT0gMSkge1xuICAgICAgdGhpcy4kaW1wb3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGNvbnN0IHF1aWxsSW1wb3J0ID0gYXdhaXQgaW1wb3J0KCdxdWlsbCcpXG5cbiAgICAgICAgdGhpcy5RdWlsbCA9IChxdWlsbEltcG9ydC5kZWZhdWx0ID8gcXVpbGxJbXBvcnQuZGVmYXVsdCA6IHF1aWxsSW1wb3J0KSBhcyBhbnlcblxuICAgICAgICAvLyBPbmx5IHJlZ2lzdGVyIGN1c3RvbSBvcHRpb25zIGFuZCBtb2R1bGVzIG9uY2VcbiAgICAgICAgdGhpcy5jb25maWcuY3VzdG9tT3B0aW9ucz8uZm9yRWFjaCgoY3VzdG9tT3B0aW9uKSA9PiB7XG4gICAgICAgICAgY29uc3QgbmV3Q3VzdG9tT3B0aW9uID0gdGhpcy5RdWlsbC5pbXBvcnQoY3VzdG9tT3B0aW9uLmltcG9ydClcbiAgICAgICAgICBuZXdDdXN0b21PcHRpb24ud2hpdGVsaXN0ID0gY3VzdG9tT3B0aW9uLndoaXRlbGlzdFxuICAgICAgICAgIHRoaXMuUXVpbGwucmVnaXN0ZXIobmV3Q3VzdG9tT3B0aW9uLCB0cnVlLCB0aGlzLmNvbmZpZy5zdXBwcmVzc0dsb2JhbFJlZ2lzdGVyV2FybmluZylcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmNvbmZpZy5jdXN0b21Nb2R1bGVzPy5mb3JFYWNoKCh7aW1wbGVtZW50YXRpb24sIHBhdGh9KSA9PiB7XG4gICAgICAgICAgdGhpcy5RdWlsbC5yZWdpc3RlcihwYXRoLCBpbXBsZW1lbnRhdGlvbiwgdGhpcy5jb25maWcuc3VwcHJlc3NHbG9iYWxSZWdpc3Rlcldhcm5pbmcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmVzb2x2ZSh0aGlzLlF1aWxsKVxuICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuJGltcG9ydFByb21pc2VcbiAgfVxufVxuIl19