import * as ɵngcc0 from '@angular/core';
var QuillModule_1;
import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { QuillEditorComponent } from './quill-editor.component';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import { QuillViewHTMLComponent } from './quill-view-html.component';
import { QuillViewComponent } from './quill-view.component';
import { QuillService } from './quill.service';
let QuillModule = QuillModule_1 = class QuillModule {
    static forRoot(config) {
        return {
            ngModule: QuillModule_1,
            providers: [
                {
                    provide: QUILL_CONFIG_TOKEN,
                    useValue: config
                }
            ]
        };
    }
};
QuillModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: QuillModule });
QuillModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function QuillModule_Factory(t) { return new (t || QuillModule)(); }, providers: [QuillService], imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QuillModule, { declarations: function () { return [QuillEditorComponent,
        QuillViewComponent,
        QuillViewHTMLComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    QuillEditorComponent,
                    QuillViewComponent,
                    QuillViewHTMLComponent
                ],
                exports: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent],
                imports: [CommonModule],
                providers: [QuillService]
            }]
    }], null, null); })();
export { QuillModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwubW9kdWxlLmpzIiwic291cmNlcyI6WyJuZzovbmd4LXF1aWxsL2xpYi9xdWlsbC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQzlDLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBRTdELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBQy9ELE9BQU8sRUFBRSxrQkFBa0IsRUFBZSxNQUFNLDJCQUEyQixDQUFBO0FBQzNFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFBO0FBQ3BFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFBO0FBQzNELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQVk5QyxJQUFhLFdBQVcsbUJBQXhCLE1BQWEsV0FBVztBQUN4QixJQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBb0I7QUFBSSxRQUNyQyxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsYUFBVztBQUMzQixZQUFNLFNBQVMsRUFBRTtBQUNqQixnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSxrQkFBa0I7QUFDckMsb0JBQVUsUUFBUSxFQUFFLE1BQU07QUFDMUIsaUJBQVM7QUFDVCxhQUFPO0FBQ1AsU0FBSyxDQUFBO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBWlksV0FBVyxvQ0FWdkIsUUFBUSxDQUFDLFVBQ1I7V0FBWSxFQUFFLGNBQ1osb0JBQW9CLGNBQ3BCLGtCQUFrQixjQUNsQixzQkFBc0IsVUFDdkIsVUFDRCxPQUFPLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRTtJQUFrQixFQUFFLHNCQUFzQixDQUFDLFVBQzNFLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUN2QixTQUFTLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFDMUIsQ0FBQyxJQUNXLFdBQVcsQ0FZdkI7Ozs7Ozs7Ozs7Ozs7OzswQkFDRDtBQUFDLFNBYlksV0FBVztBQUN2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbidcbmltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcblxuaW1wb3J0IHsgUXVpbGxFZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL3F1aWxsLWVkaXRvci5jb21wb25lbnQnXG5pbXBvcnQgeyBRVUlMTF9DT05GSUdfVE9LRU4sIFF1aWxsQ29uZmlnIH0gZnJvbSAnLi9xdWlsbC1lZGl0b3IuaW50ZXJmYWNlcydcbmltcG9ydCB7IFF1aWxsVmlld0hUTUxDb21wb25lbnQgfSBmcm9tICcuL3F1aWxsLXZpZXctaHRtbC5jb21wb25lbnQnXG5pbXBvcnQgeyBRdWlsbFZpZXdDb21wb25lbnQgfSBmcm9tICcuL3F1aWxsLXZpZXcuY29tcG9uZW50J1xuaW1wb3J0IHsgUXVpbGxTZXJ2aWNlIH0gZnJvbSAnLi9xdWlsbC5zZXJ2aWNlJ1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBRdWlsbEVkaXRvckNvbXBvbmVudCxcbiAgICBRdWlsbFZpZXdDb21wb25lbnQsXG4gICAgUXVpbGxWaWV3SFRNTENvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbUXVpbGxFZGl0b3JDb21wb25lbnQsIFF1aWxsVmlld0NvbXBvbmVudCwgUXVpbGxWaWV3SFRNTENvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICBwcm92aWRlcnM6IFtRdWlsbFNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIFF1aWxsTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnPzogUXVpbGxDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFF1aWxsTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBRdWlsbE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogUVVJTExfQ09ORklHX1RPS0VOLFxuICAgICAgICAgIHVzZVZhbHVlOiBjb25maWdcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgfVxufVxuIl19