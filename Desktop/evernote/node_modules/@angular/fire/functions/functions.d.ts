import { InjectionToken, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { FirebaseAppConfig, FirebaseOptions, ɵPromiseProxy } from '@angular/fire';
import firebase from 'firebase/app';
import { HttpsCallableOptions } from '@firebase/functions-types';
import * as ɵngcc0 from '@angular/core';
export declare const ORIGIN: InjectionToken<string>;
export declare const REGION: InjectionToken<string>;
export declare const NEW_ORIGIN_BEHAVIOR: InjectionToken<boolean>;
declare type UseEmulatorArguments = [string, number];
export declare const USE_EMULATOR: InjectionToken<UseEmulatorArguments>;
export interface AngularFireFunctions extends Omit<ɵPromiseProxy<firebase.functions.Functions>, 'httpsCallable'> {
}
export declare class AngularFireFunctions {
    readonly httpsCallable: <T = any, R = any>(name: string, options?: HttpsCallableOptions) => (data: T) => Observable<R>;
    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, zone: NgZone, region: string | null, origin: string | null, newOriginBehavior: boolean | null, _useEmulator: any);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireFunctions, [null, { optional: true; }, null, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }]>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25zLmQudHMiLCJzb3VyY2VzIjpbImZ1bmN0aW9ucy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZpcmViYXNlQXBwQ29uZmlnLCBGaXJlYmFzZU9wdGlvbnMsIMm1UHJvbWlzZVByb3h5IH0gZnJvbSAnQGFuZ3VsYXIvZmlyZSc7XG5pbXBvcnQgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IEh0dHBzQ2FsbGFibGVPcHRpb25zIH0gZnJvbSAnQGZpcmViYXNlL2Z1bmN0aW9ucy10eXBlcyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBPUklHSU46IEluamVjdGlvblRva2VuPHN0cmluZz47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBSRUdJT046IEluamVjdGlvblRva2VuPHN0cmluZz47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBORVdfT1JJR0lOX0JFSEFWSU9SOiBJbmplY3Rpb25Ub2tlbjxib29sZWFuPjtcbmRlY2xhcmUgdHlwZSBVc2VFbXVsYXRvckFyZ3VtZW50cyA9IFtzdHJpbmcsIG51bWJlcl07XG5leHBvcnQgZGVjbGFyZSBjb25zdCBVU0VfRU1VTEFUT1I6IEluamVjdGlvblRva2VuPFVzZUVtdWxhdG9yQXJndW1lbnRzPjtcbmV4cG9ydCBpbnRlcmZhY2UgQW5ndWxhckZpcmVGdW5jdGlvbnMgZXh0ZW5kcyBPbWl0PMm1UHJvbWlzZVByb3h5PGZpcmViYXNlLmZ1bmN0aW9ucy5GdW5jdGlvbnM+LCAnaHR0cHNDYWxsYWJsZSc+IHtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFuZ3VsYXJGaXJlRnVuY3Rpb25zIHtcbiAgICByZWFkb25seSBodHRwc0NhbGxhYmxlOiA8VCA9IGFueSwgUiA9IGFueT4obmFtZTogc3RyaW5nLCBvcHRpb25zPzogSHR0cHNDYWxsYWJsZU9wdGlvbnMpID0+IChkYXRhOiBUKSA9PiBPYnNlcnZhYmxlPFI+O1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEZpcmViYXNlT3B0aW9ucywgbmFtZU9yQ29uZmlnOiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyB8IG51bGwgfCB1bmRlZmluZWQsIHpvbmU6IE5nWm9uZSwgcmVnaW9uOiBzdHJpbmcgfCBudWxsLCBvcmlnaW46IHN0cmluZyB8IG51bGwsIG5ld09yaWdpbkJlaGF2aW9yOiBib29sZWFuIHwgbnVsbCwgX3VzZUVtdWxhdG9yOiBhbnkpO1xufVxuZXhwb3J0IHt9O1xuIl19