import { NgZone, InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { FirebaseOptions, FirebaseAppConfig, ɵPromiseProxy } from '@angular/fire';
import firebase from 'firebase/app';
import * as ɵngcc0 from '@angular/core';
export interface AngularFireAuth extends ɵPromiseProxy<firebase.auth.Auth> {
}
declare type UseEmulatorArguments = [string, number];
export declare const USE_EMULATOR: InjectionToken<UseEmulatorArguments>;
export declare const SETTINGS: InjectionToken<firebase.auth.AuthSettings>;
export declare const TENANT_ID: InjectionToken<string>;
export declare const LANGUAGE_CODE: InjectionToken<string>;
export declare const USE_DEVICE_LANGUAGE: InjectionToken<boolean>;
export declare const PERSISTENCE: InjectionToken<string>;
export declare class AngularFireAuth {
    /**
     * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out
     */
    readonly authState: Observable<firebase.User | null>;
    /**
     * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).
     */
    readonly idToken: Observable<string | null>;
    /**
     * Observable of the currently signed-in user (or null).
     */
    readonly user: Observable<firebase.User | null>;
    /**
     * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other
     * helper properties for getting different data associated with the token as well as all the decoded payload claims
     * (or null).
     */
    readonly idTokenResult: Observable<firebase.auth.IdTokenResult | null>;
    /**
     * Observable of the currently signed-in user's credential, or null
     */
    readonly credential: Observable<Required<firebase.auth.UserCredential> | null>;
    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, platformId: Object, zone: NgZone, _useEmulator: any, // can't use the tuple here
    _settings: any, // can't use firebase.auth.AuthSettings here
    tenantId: string | null, languageCode: string | null, useDeviceLanguage: boolean | null, persistence: string | null);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireAuth, [null, { optional: true; }, null, null, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }]>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5kLnRzIiwic291cmNlcyI6WyJhdXRoLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRmlyZWJhc2VPcHRpb25zLCBGaXJlYmFzZUFwcENvbmZpZywgybVQcm9taXNlUHJveHkgfSBmcm9tICdAYW5ndWxhci9maXJlJztcbmltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuZXhwb3J0IGludGVyZmFjZSBBbmd1bGFyRmlyZUF1dGggZXh0ZW5kcyDJtVByb21pc2VQcm94eTxmaXJlYmFzZS5hdXRoLkF1dGg+IHtcbn1cbmRlY2xhcmUgdHlwZSBVc2VFbXVsYXRvckFyZ3VtZW50cyA9IFtzdHJpbmcsIG51bWJlcl07XG5leHBvcnQgZGVjbGFyZSBjb25zdCBVU0VfRU1VTEFUT1I6IEluamVjdGlvblRva2VuPFVzZUVtdWxhdG9yQXJndW1lbnRzPjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFNFVFRJTkdTOiBJbmplY3Rpb25Ub2tlbjxmaXJlYmFzZS5hdXRoLkF1dGhTZXR0aW5ncz47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBURU5BTlRfSUQ6IEluamVjdGlvblRva2VuPHN0cmluZz47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBMQU5HVUFHRV9DT0RFOiBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgVVNFX0RFVklDRV9MQU5HVUFHRTogSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBQRVJTSVNURU5DRTogSW5qZWN0aW9uVG9rZW48c3RyaW5nPjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFuZ3VsYXJGaXJlQXV0aCB7XG4gICAgLyoqXG4gICAgICogT2JzZXJ2YWJsZSBvZiBhdXRoZW50aWNhdGlvbiBzdGF0ZTsgYXMgb2YgRmlyZWJhc2UgNC4wIHRoaXMgaXMgb25seSB0cmlnZ2VyZWQgdmlhIHNpZ24taW4vb3V0XG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0aFN0YXRlOiBPYnNlcnZhYmxlPGZpcmViYXNlLlVzZXIgfCBudWxsPjtcbiAgICAvKipcbiAgICAgKiBPYnNlcnZhYmxlIG9mIHRoZSBjdXJyZW50bHkgc2lnbmVkLWluIHVzZXIncyBKV1QgdG9rZW4gdXNlZCB0byBpZGVudGlmeSB0aGUgdXNlciB0byBhIEZpcmViYXNlIHNlcnZpY2UgKG9yIG51bGwpLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlkVG9rZW46IE9ic2VydmFibGU8c3RyaW5nIHwgbnVsbD47XG4gICAgLyoqXG4gICAgICogT2JzZXJ2YWJsZSBvZiB0aGUgY3VycmVudGx5IHNpZ25lZC1pbiB1c2VyIChvciBudWxsKS5cbiAgICAgKi9cbiAgICByZWFkb25seSB1c2VyOiBPYnNlcnZhYmxlPGZpcmViYXNlLlVzZXIgfCBudWxsPjtcbiAgICAvKipcbiAgICAgKiBPYnNlcnZhYmxlIG9mIHRoZSBjdXJyZW50bHkgc2lnbmVkLWluIHVzZXIncyBJZFRva2VuUmVzdWx0IG9iamVjdCB3aGljaCBjb250YWlucyB0aGUgSUQgdG9rZW4gSldUIHN0cmluZyBhbmQgb3RoZXJcbiAgICAgKiBoZWxwZXIgcHJvcGVydGllcyBmb3IgZ2V0dGluZyBkaWZmZXJlbnQgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIHRva2VuIGFzIHdlbGwgYXMgYWxsIHRoZSBkZWNvZGVkIHBheWxvYWQgY2xhaW1zXG4gICAgICogKG9yIG51bGwpLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlkVG9rZW5SZXN1bHQ6IE9ic2VydmFibGU8ZmlyZWJhc2UuYXV0aC5JZFRva2VuUmVzdWx0IHwgbnVsbD47XG4gICAgLyoqXG4gICAgICogT2JzZXJ2YWJsZSBvZiB0aGUgY3VycmVudGx5IHNpZ25lZC1pbiB1c2VyJ3MgY3JlZGVudGlhbCwgb3IgbnVsbFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNyZWRlbnRpYWw6IE9ic2VydmFibGU8UmVxdWlyZWQ8ZmlyZWJhc2UuYXV0aC5Vc2VyQ3JlZGVudGlhbD4gfCBudWxsPjtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBGaXJlYmFzZU9wdGlvbnMsIG5hbWVPckNvbmZpZzogc3RyaW5nIHwgRmlyZWJhc2VBcHBDb25maWcgfCBudWxsIHwgdW5kZWZpbmVkLCBwbGF0Zm9ybUlkOiBPYmplY3QsIHpvbmU6IE5nWm9uZSwgX3VzZUVtdWxhdG9yOiBhbnksIC8vIGNhbid0IHVzZSB0aGUgdHVwbGUgaGVyZVxuICAgIF9zZXR0aW5nczogYW55LCAvLyBjYW4ndCB1c2UgZmlyZWJhc2UuYXV0aC5BdXRoU2V0dGluZ3MgaGVyZVxuICAgIHRlbmFudElkOiBzdHJpbmcgfCBudWxsLCBsYW5ndWFnZUNvZGU6IHN0cmluZyB8IG51bGwsIHVzZURldmljZUxhbmd1YWdlOiBib29sZWFuIHwgbnVsbCwgcGVyc2lzdGVuY2U6IHN0cmluZyB8IG51bGwpO1xufVxuZXhwb3J0IHt9O1xuIl19