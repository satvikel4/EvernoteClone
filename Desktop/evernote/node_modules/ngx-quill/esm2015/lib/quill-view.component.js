import { __awaiter, __decorate, __param } from "tslib";
import { isPlatformServer } from '@angular/common';
import { AfterViewInit, Component, ElementRef, Inject, Input, OnChanges, PLATFORM_ID, Renderer2, SimpleChanges, ViewEncapsulation, NgZone } from '@angular/core';
import { getFormat } from './helpers';
import { QuillService } from './quill.service';
import * as ɵngcc0 from '@angular/core';
let QuillViewComponent = class QuillViewComponent {
    constructor(platformId, renderer, elementRef, zone, service) {
        this.platformId = platformId;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.zone = zone;
        this.service = service;
        this.strict = true;
        this.customModules = [];
        this.customOptions = [];
        this.preserveWhitespace = false;
        this.valueSetter = (quillEditor, value) => {
            const format = getFormat(this.format, this.service.config.format);
            let content = value;
            if (format === 'html' || format === 'text') {
                content = quillEditor.clipboard.convert(value);
            }
            else if (format === 'json') {
                try {
                    content = JSON.parse(value);
                }
                catch (e) {
                    content = [{ insert: value }];
                }
            }
            quillEditor.setContents(content);
        };
    }
    ngOnChanges(changes) {
        if (!this.quillEditor) {
            return;
        }
        if (changes.content) {
            this.valueSetter(this.quillEditor, changes.content.currentValue);
        }
    }
    ngAfterViewInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (isPlatformServer(this.platformId)) {
                return;
            }
            const Quill = yield this.service.getQuill();
            const modules = Object.assign({}, this.modules || this.service.config.modules);
            modules.toolbar = false;
            this.customOptions.forEach((customOption) => {
                const newCustomOption = Quill.import(customOption.import);
                newCustomOption.whitelist = customOption.whitelist;
                Quill.register(newCustomOption, true);
            });
            this.customModules.forEach(({ implementation, path }) => {
                Quill.register(path, implementation);
            });
            let debug = this.debug;
            if (!debug && debug !== false && this.service.config.debug) {
                debug = this.service.config.debug;
            }
            let formats = this.formats;
            if (!formats && formats === undefined) {
                formats = this.service.config.formats ?
                    Object.assign({}, this.service.config.formats) : (this.service.config.formats === null ? null : undefined);
            }
            const theme = this.theme || (this.service.config.theme ? this.service.config.theme : 'snow');
            this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');
            this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');
            this.zone.runOutsideAngular(() => {
                this.quillEditor = new Quill(this.editorElem, {
                    debug: debug,
                    formats: formats,
                    modules,
                    readOnly: true,
                    strict: this.strict,
                    theme
                });
            });
            this.renderer.addClass(this.editorElem, 'ngx-quill-view');
            if (this.content) {
                this.valueSetter(this.quillEditor, this.content);
            }
        });
    }
};
QuillViewComponent.ɵfac = function QuillViewComponent_Factory(t) { return new (t || QuillViewComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(QuillService)); };
QuillViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QuillViewComponent, selectors: [["quill-view"]], inputs: { strict: "strict", customModules: "customModules", customOptions: "customOptions", preserveWhitespace: "preserveWhitespace", format: "format", theme: "theme", modules: "modules", debug: "debug", formats: "formats", content: "content" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function QuillViewComponent_Template(rf, ctx) { }, styles: ["\n.ql-container.ngx-quill-view {\n  border: 0;\n}\n"], encapsulation: 2 });
QuillViewComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
    { type: QuillService, decorators: [{ type: Inject, args: [QuillService,] }] }
];
__decorate([
    Input()
], QuillViewComponent.prototype, "format", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "theme", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "modules", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "debug", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "formats", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "strict", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "content", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "customModules", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "customOptions", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "preserveWhitespace", void 0);
QuillViewComponent = __decorate([ __param(0, Inject(PLATFORM_ID)),
    __param(1, Inject(Renderer2)),
    __param(2, Inject(ElementRef)),
    __param(3, Inject(NgZone)),
    __param(4, Inject(QuillService))
], QuillViewComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillViewComponent, [{
        type: Component,
        args: [{
                encapsulation: ViewEncapsulation.None,
                selector: 'quill-view',
                template: `
`,
                styles: [`
.ql-container.ngx-quill-view {
  border: 0;
}
`]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc0.Renderer2, decorators: [{
                type: Inject,
                args: [Renderer2]
            }] }, { type: ɵngcc0.ElementRef, decorators: [{
                type: Inject,
                args: [ElementRef]
            }] }, { type: ɵngcc0.NgZone, decorators: [{
                type: Inject,
                args: [NgZone]
            }] }, { type: QuillService, decorators: [{
                type: Inject,
                args: [QuillService]
            }] }]; }, { strict: [{
            type: Input
        }], customModules: [{
            type: Input
        }], customOptions: [{
            type: Input
        }], preserveWhitespace: [{
            type: Input
        }], format: [{
            type: Input
        }], theme: [{
            type: Input
        }], modules: [{
            type: Input
        }], debug: [{
            type: Input
        }], formats: [{
            type: Input
        }], content: [{
            type: Input
        }] }); })();
export { QuillViewComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,