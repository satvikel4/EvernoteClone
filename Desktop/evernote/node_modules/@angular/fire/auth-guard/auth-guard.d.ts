import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';
import { Observable, UnaryFunction } from 'rxjs';
import firebase from 'firebase/app';
import { AngularFireAuth } from '@angular/fire/auth';
import * as ɵngcc0 from '@angular/core';
export declare type AuthPipeGenerator = (next: ActivatedRouteSnapshot, state: RouterStateSnapshot) => AuthPipe;
export declare type AuthPipe = UnaryFunction<Observable<firebase.User | null>, Observable<boolean | string | any[]>>;
export declare const loggedIn: AuthPipe;
export declare class AngularFireAuthGuard implements CanActivate {
    private router;
    private auth;
    constructor(router: Router, auth: AngularFireAuth);
    canActivate: (next: ActivatedRouteSnapshot, state: RouterStateSnapshot) => Observable<boolean | import("@angular/router").UrlTree>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireAuthGuard, never>;
}
export declare const canActivate: (pipe: AuthPipeGenerator) => {
    canActivate: (typeof AngularFireAuthGuard)[];
    data: {
        authGuardPipe: AuthPipeGenerator;
    };
};
export declare const isNotAnonymous: AuthPipe;
export declare const idTokenResult: import("rxjs").OperatorFunction<firebase.User, any>;
export declare const emailVerified: AuthPipe;
export declare const customClaims: UnaryFunction<Observable<firebase.User>, Observable<any>>;
export declare const hasCustomClaim: (claim: string) => AuthPipe;
export declare const redirectUnauthorizedTo: (redirect: string | any[]) => AuthPipe;
export declare const redirectLoggedInTo: (redirect: string | any[]) => AuthPipe;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC5kLnRzIiwic291cmNlcyI6WyJhdXRoLWd1YXJkLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgQ2FuQWN0aXZhdGUsIFJvdXRlciwgUm91dGVyU3RhdGVTbmFwc2hvdCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBVbmFyeUZ1bmN0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IEFuZ3VsYXJGaXJlQXV0aCB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUvYXV0aCc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEF1dGhQaXBlR2VuZXJhdG9yID0gKG5leHQ6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KSA9PiBBdXRoUGlwZTtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgQXV0aFBpcGUgPSBVbmFyeUZ1bmN0aW9uPE9ic2VydmFibGU8ZmlyZWJhc2UuVXNlciB8IG51bGw+LCBPYnNlcnZhYmxlPGJvb2xlYW4gfCBzdHJpbmcgfCBhbnlbXT4+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgbG9nZ2VkSW46IEF1dGhQaXBlO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQW5ndWxhckZpcmVBdXRoR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XG4gICAgcHJpdmF0ZSByb3V0ZXI7XG4gICAgcHJpdmF0ZSBhdXRoO1xuICAgIGNvbnN0cnVjdG9yKHJvdXRlcjogUm91dGVyLCBhdXRoOiBBbmd1bGFyRmlyZUF1dGgpO1xuICAgIGNhbkFjdGl2YXRlOiAobmV4dDogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpID0+IE9ic2VydmFibGU8Ym9vbGVhbiB8IGltcG9ydChcIkBhbmd1bGFyL3JvdXRlclwiKS5VcmxUcmVlPjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGNhbkFjdGl2YXRlOiAocGlwZTogQXV0aFBpcGVHZW5lcmF0b3IpID0+IHtcbiAgICBjYW5BY3RpdmF0ZTogKHR5cGVvZiBBbmd1bGFyRmlyZUF1dGhHdWFyZClbXTtcbiAgICBkYXRhOiB7XG4gICAgICAgIGF1dGhHdWFyZFBpcGU6IEF1dGhQaXBlR2VuZXJhdG9yO1xuICAgIH07XG59O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgaXNOb3RBbm9ueW1vdXM6IEF1dGhQaXBlO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgaWRUb2tlblJlc3VsdDogaW1wb3J0KFwicnhqc1wiKS5PcGVyYXRvckZ1bmN0aW9uPGZpcmViYXNlLlVzZXIsIGFueT47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBlbWFpbFZlcmlmaWVkOiBBdXRoUGlwZTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGN1c3RvbUNsYWltczogVW5hcnlGdW5jdGlvbjxPYnNlcnZhYmxlPGZpcmViYXNlLlVzZXI+LCBPYnNlcnZhYmxlPGFueT4+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgaGFzQ3VzdG9tQ2xhaW06IChjbGFpbTogc3RyaW5nKSA9PiBBdXRoUGlwZTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHJlZGlyZWN0VW5hdXRob3JpemVkVG86IChyZWRpcmVjdDogc3RyaW5nIHwgYW55W10pID0+IEF1dGhQaXBlO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgcmVkaXJlY3RMb2dnZWRJblRvOiAocmVkaXJlY3Q6IHN0cmluZyB8IGFueVtdKSA9PiBBdXRoUGlwZTtcbiJdfQ==