import { InjectionToken, NgZone } from '@angular/core';
import { AngularFireList, AngularFireObject, PathReference, QueryFn } from './interfaces';
import { FirebaseAppConfig, FirebaseOptions, ɵAngularFireSchedulers } from '@angular/fire';
import { Observable } from 'rxjs';
import 'firebase/database';
import firebase from 'firebase/app';
import * as ɵngcc0 from '@angular/core';
export declare const URL: InjectionToken<string>;
declare type UseEmulatorArguments = [string, number];
export declare const USE_EMULATOR: InjectionToken<UseEmulatorArguments>;
export declare class AngularFireDatabase {
    readonly database: firebase.database.Database;
    readonly schedulers: ɵAngularFireSchedulers;
    readonly keepUnstableUntilFirst: <T>(obs$: Observable<T>) => Observable<T>;
    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, databaseURL: string | null, platformId: Object, zone: NgZone, _useEmulator: any, // tuple isn't working here
    useAuthEmulator: any);
    list<T>(pathOrRef: PathReference, queryFn?: QueryFn): AngularFireList<T>;
    object<T>(pathOrRef: PathReference): AngularFireObject<T>;
    createPushId(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireDatabase, [null, { optional: true; }, { optional: true; }, null, null, { optional: true; }, { optional: true; }]>;
}
export { PathReference, DatabaseSnapshot, ChildEvent, ListenEvent, QueryFn, AngularFireList, AngularFireObject, AngularFireAction, Action, SnapshotAction } from './interfaces';

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuZC50cyIsInNvdXJjZXMiOlsiZGF0YWJhc2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbmd1bGFyRmlyZUxpc3QsIEFuZ3VsYXJGaXJlT2JqZWN0LCBQYXRoUmVmZXJlbmNlLCBRdWVyeUZuIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IEZpcmViYXNlQXBwQ29uZmlnLCBGaXJlYmFzZU9wdGlvbnMsIMm1QW5ndWxhckZpcmVTY2hlZHVsZXJzIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgJ2ZpcmViYXNlL2RhdGFiYXNlJztcbmltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgVVJMOiBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+O1xuZGVjbGFyZSB0eXBlIFVzZUVtdWxhdG9yQXJndW1lbnRzID0gW3N0cmluZywgbnVtYmVyXTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFVTRV9FTVVMQVRPUjogSW5qZWN0aW9uVG9rZW48VXNlRW11bGF0b3JBcmd1bWVudHM+O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQW5ndWxhckZpcmVEYXRhYmFzZSB7XG4gICAgcmVhZG9ubHkgZGF0YWJhc2U6IGZpcmViYXNlLmRhdGFiYXNlLkRhdGFiYXNlO1xuICAgIHJlYWRvbmx5IHNjaGVkdWxlcnM6IMm1QW5ndWxhckZpcmVTY2hlZHVsZXJzO1xuICAgIHJlYWRvbmx5IGtlZXBVbnN0YWJsZVVudGlsRmlyc3Q6IDxUPihvYnMkOiBPYnNlcnZhYmxlPFQ+KSA9PiBPYnNlcnZhYmxlPFQ+O1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEZpcmViYXNlT3B0aW9ucywgbmFtZU9yQ29uZmlnOiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyB8IG51bGwgfCB1bmRlZmluZWQsIGRhdGFiYXNlVVJMOiBzdHJpbmcgfCBudWxsLCBwbGF0Zm9ybUlkOiBPYmplY3QsIHpvbmU6IE5nWm9uZSwgX3VzZUVtdWxhdG9yOiBhbnksIC8vIHR1cGxlIGlzbid0IHdvcmtpbmcgaGVyZVxuICAgIHVzZUF1dGhFbXVsYXRvcjogYW55KTtcbiAgICBsaXN0PFQ+KHBhdGhPclJlZjogUGF0aFJlZmVyZW5jZSwgcXVlcnlGbj86IFF1ZXJ5Rm4pOiBBbmd1bGFyRmlyZUxpc3Q8VD47XG4gICAgb2JqZWN0PFQ+KHBhdGhPclJlZjogUGF0aFJlZmVyZW5jZSk6IEFuZ3VsYXJGaXJlT2JqZWN0PFQ+O1xuICAgIGNyZWF0ZVB1c2hJZCgpOiBzdHJpbmc7XG59XG5leHBvcnQgeyBQYXRoUmVmZXJlbmNlLCBEYXRhYmFzZVNuYXBzaG90LCBDaGlsZEV2ZW50LCBMaXN0ZW5FdmVudCwgUXVlcnlGbiwgQW5ndWxhckZpcmVMaXN0LCBBbmd1bGFyRmlyZU9iamVjdCwgQW5ndWxhckZpcmVBY3Rpb24sIEFjdGlvbiwgU25hcHNob3RBY3Rpb24gfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuIl19